syntax = "proto3";

package dexter;

service Alerts {
  rpc CreateAlert(Alert) returns (Alert) {}
  rpc ListAlerts(ListAlertsRequest) returns (ListAlertsResponse) {}
  rpc GetAlert(GetAlertRequest) returns (Alert) {}
  rpc UpdateAlert(Alert) returns (Alert) {}
  rpc DeleteAlert(DeleteAlertRequest) returns (DeleteAlertResponse) {}
  rpc ListIndicators(ListIndicatorsRequest) returns (ListIndicatorsResponse) {}
  /*
  rpc CreateChart(CreateChartRequest) returns (CreateChartResponse) {}
  rpc ListCharts(ListChartsRequest) returns (ListChartsResponse) {}
  rpc GetChart() {}
  rpc UpdateChart() {}
  rpc DeleteChart() {}
  */
}

enum Condition {
  Crossing = 0;
  CrossingUp = 1;
  CrossingDown = 2;
  GreaterThan = 3;
  LessThan = 4;
  EnteringChannel = 5;
  ExitingChannel = 6;
  InsideChannel = 7;
  OutsideChannel = 8;
  MovingUp = 9;
  MovingDown = 10;
  MovingUpPercent = 11;
  MovingDownPercent = 12;
}

enum Frequency {
  OnlyOnce  = 0;
  OncePerBar = 1;
  OncePerBarClose = 2;
  OncePerMinute = 3;
}

message Chart {
  uint64 chart_id = 1;
  string external_id = 2;
  string exchange = 3;
  string market = 4;
}

message Webhook {
  string method = 1;
  string url = 2;
  string body = 3;
}

message Alert {
  uint64 alert_id = 1;
  uint64 external_id = 2;
  Chart chart = 3;
  string timeframe = 4;
  string line_a = 5;
  Condition condition = 6;
  string line_b = 7;
  Frequency frequency = 8;
  string message_body = 9;
  Webhook webhook = 10;
}

message Indicator {
  string name = 1;
  string implementation = 2;
  string source = 3;
  string inputs = 4;
  string lines = 5;
  string styles = 6;
}

message ListAlertsRequest {
  uint64 external_id = 1;
}

message ListAlertsResponse {
  repeated Alert alerts = 1;
}

message GetAlertRequest {
  uint64 external_id = 1;
}

message DeleteAlertRequest {
  uint64 alert_id = 1;
}

message DeleteAlertResponse {
  uint64 alert_id = 1;
}

message ListIndicatorsRequest {
}

message ListIndicatorsResponse {
  repeated Indicator indicators = 1;
}
